<!doctype html>
<html lang="en">

<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Drawing Board</title>
   <link rel="stylesheet" href="styles/tailstyle.css">
</head>

<body class="bg-white font-sans m-0 p-0">

    <!-- Header with title -->
    <header class="bg-blue-600 text-white text-center py-6 shadow-md">
        <h1 class="text-3xl font-semibold">Drawing Board</h1>
    </header>

    <!-- Main Content -->
    <main class="flex p-6 space-x-6">
        <!-- Left Toolbar (tools) -->
        <div class="w-64 p-6 bg-gray-100 rounded-lg shadow-lg space-y-6">
            <input type="color" id="color-picker" value="#000000" class="w-12 h-12 cursor-pointer rounded-full border border-gray-300">
            
            <div>
                <label for="brush-size" class="text-gray-700 font-medium">Brush Size</label>
                <input type="range" id="brush-size" min="1" max="20" value="5" class="w-full mt-2 cursor-pointer">
            </div>

            <button id="clear-btn" class="w-full py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-500 focus:outline-none">Clear</button>

            <!-- Undo Button -->
            <button id="undo-btn" class="w-full py-3 bg-yellow-500 text-black text-lg font-bold rounded-lg hover:bg-yellow-400 focus:outline-none">Undo</button>

            <button id="download-btn" class="w-full py-3 bg-purple-600 text-white rounded-lg hover:bg-purple-500 focus:outline-none">Download</button>
        </div>

        <!-- Right Canvas Area -->
        <div class="flex-grow flex justify-center items-center">
            <canvas id="whiteboard" width="800" height="400" class="bg-gray-50 border border-gray-300 rounded-lg shadow-md"></canvas>
        </div>
    </main>

    <script>
        const canvas = document.getElementById("whiteboard");
        const context = canvas.getContext("2d");
        const clearButton = document.getElementById("clear-btn");
        const colorPicker = document.getElementById("color-picker");
        const brushSizeInput = document.getElementById("brush-size");
        const undoButton = document.getElementById("undo-btn");
        const downloadButton = document.getElementById("download-btn");

        let drawing = false;
        const history = [];

        // Save canvas state to history
        function saveState() {
            history.push(canvas.toDataURL());
        }

        // Restore canvas state from history
        function restoreState(dataURL) {
            const img = new Image();
            img.onload = () => {
                context.clearRect(0, 0, canvas.width, canvas.height);
                context.drawImage(img, 0, 0, canvas.width, canvas.height);
            };
            img.src = dataURL;
        }

        // Initialize canvas state
        saveState();

        // Drawing functionality
        canvas.addEventListener("mousedown", () => {
            drawing = true;
            context.beginPath();
            saveState();
        });

        canvas.addEventListener("mouseup", () => {
            drawing = false;
            context.closePath();
        });

        canvas.addEventListener("mousemove", draw);

        function draw(e) {
            if (!drawing) return;

            context.lineCap = "round";
            context.lineTo(
                e.clientX - canvas.getBoundingClientRect().left,
                e.clientY - canvas.getBoundingClientRect().top
            );
            context.stroke();
            context.beginPath();
            context.moveTo(
                e.clientX - canvas.getBoundingClientRect().left,
                e.clientY - canvas.getBoundingClientRect().top
            );
        }

        clearButton.addEventListener("click", () => {
            saveState();
            context.clearRect(0, 0, canvas.width, canvas.height);
        });

        colorPicker.addEventListener("input", (e) => {
            context.strokeStyle = e.target.value;
        });

        brushSizeInput.addEventListener("input", (e) => {
            context.lineWidth = e.target.value;
        });

        // Undo functionality
        undoButton.addEventListener("click", () => {
            if (history.length > 1) {
                restoreState(history.pop());
            }
        });

        // Download functionality
        downloadButton.addEventListener("click", () => {
            const link = document.createElement("a");
            link.download = "annotated_image.png";
            link.href = canvas.toDataURL();
            link.click();
        });
    </script>
</body>

</html>
