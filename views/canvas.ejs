<!DOCTYPE html>
<html lang="en" class="h-full">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Drawing Board</title>
    <script src="https://cdn.tailwindcss.com"></script>
</head>

<body class="min-h-screen bg-blue-300">
    <div class="p-4 lg:p-6">
        <div class="bg-white/50 backdrop-blur-xl p-4 rounded-lg">

            <h1 class="text-2xl font-bold text-gray-800 mb-4">Drawing Board</h1>


            <div class="flex flex-col lg:flex-row gap-4">
                <!-- Controls Panel -->
                <div class="lg:w-64  space-y-4 h-full">
                    <div class="bg-white rounded-lg shadow p-4 space-y-4">
                        <div class="space-y-2">
                            <label class="block text-sm font-semibold  text-gray-700">Color</label>
                            <input type="color" id="color-picker" value="#000000"
                                class="w-full h-10 rounded-md border border-gray-300 cursor-pointer" />
                        </div>

                        <div class="space-y-2">
                            <label class="block text-sm font-semibold text-gray-700" for="brush-size">
                                Brush Size:
                            </label>
                            <input type="range" id="brush-size" min="1" max="50" value="1" class="w-full h-10" />
                        </div>

                        <div class="space-y-2">
                            <label class="block text-sm font-semibold text-gray-700" for="upload-image">
                                Upload Image
                            </label>
                            <input type="file" id="upload-image" accept="image/*" class="w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4
                                file:rounded-md file:border-0 file:text-sm file:font-semibold
                                file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100" />
                        </div>

                        <div class="space-y-2">
                            <label class="block text-sm font-semibold text-gray-700">Actions</label>
                            <div class="flex flex-col gap-2">
                                <button id="undo-btn"
                                    class="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors duration-200">
                                    Undo
                                </button>
                                <button id="clear-btn"
                                    class="px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700 transition-colors duration-200">
                                    Clear
                                </button>
                                <button id="download-btn"
                                    class="px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 transition-colors duration-200">
                                    Download
                                </button>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Canvas Container -->
                <div class="flex-1 bg-white rounded-lg shadow p-4">
                    <div class="w-full h-full relative">
                        <canvas id="whiteboard" width="800" height="400"
                            class="w-full h-full border border-gray-200 rounded-lg bg-white"></canvas>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        const canvas = document.getElementById("whiteboard");
        const context = canvas.getContext("2d");

        let drawing = false;
        const history = []; // Stack to store canvas states
        let currentStep = -1;

        // Save the current canvas state to the history stack
        function saveState() {
            if (currentStep < history.length - 1) {
                history.splice(currentStep + 1); // Remove states ahead of the current step
            }
            history.push(canvas.toDataURL()); // Save the current canvas as an image URL
            currentStep = history.length - 1; // Update the current step index
        }

        // Restore the canvas to a specific state from the history stack
        function restoreState(step) {
            const canvasImage = new Image();
            canvasImage.src = history[step];
            canvasImage.onload = () => {
                context.clearRect(0, 0, canvas.width, canvas.height); // Clear the canvas
                context.drawImage(canvasImage, 0, 0); // Draw the saved state
            };
        }

        canvas.addEventListener("mousedown", (e) => {
            drawing = true;
            const rect = canvas.getBoundingClientRect();
            const x = (e.clientX - rect.left) * (canvas.width / rect.width);
            const y = (e.clientY - rect.top) * (canvas.height / rect.height);

            context.beginPath();
            context.moveTo(x, y);
        });


        canvas.addEventListener("mouseup", () => {
            if (drawing) {
                saveState(); // Save the state when the user finishes drawing
            }
            drawing = false;
            context.closePath();
        });

        canvas.addEventListener("mousemove", (e) => {
            if (!drawing) return;

            const rect = canvas.getBoundingClientRect(); // Get the canvas's position and size
            const x = (e.clientX - rect.left) * (canvas.width / rect.width); // Adjust x based on canvas scaling
            const y = (e.clientY - rect.top) * (canvas.height / rect.height); // Adjust y based on canvas scaling

            context.lineCap = "round";
            context.lineTo(x, y);
            context.stroke();
            context.beginPath();
            context.moveTo(x, y);
        });


        const undoButton = document.getElementById("undo-btn");
        undoButton.addEventListener("click", () => {
            if (currentStep > 0) {
                currentStep--;
                restoreState(currentStep); // Restore the previous state
            }
        });

        const clearButton = document.getElementById("clear-btn");
        clearButton.addEventListener("click", () => {
            context.clearRect(0, 0, canvas.width, canvas.height); // Clear the canvas
            history.length = 0; // Reset the history stack
            currentStep = -1; // Reset the current step
        });

        const colorPicker = document.getElementById("color-picker");
        colorPicker.addEventListener("input", (e) => {
            context.strokeStyle = e.target.value;
        });

        const brushSizeInput = document.getElementById("brush-size");
        const brushSizeDisplay = document.createElement("span"); // Create a live preview
        brushSizeDisplay.style.display = "inline-block";
        brushSizeDisplay.style.marginLeft = "10px";
        brushSizeInput.parentNode.appendChild(brushSizeDisplay); // Add the preview next to the slider

        // Update brush size dynamically
        brushSizeInput.addEventListener("input", (e) => {
            const brushSize = e.target.value; // Value is already constrained by min/max in HTML
            context.lineWidth = brushSize; // Update canvas brush size
            brushSizeDisplay.textContent = `${brushSize}px`; // Show the current brush size
        });

        // Initialize the brush size display
        brushSizeDisplay.textContent = `${brushSizeInput.value}px`;


        const uploadImageInput = document.getElementById("upload-image");
        uploadImageInput.addEventListener("change", (e) => {
            const file = e.target.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = (event) => {
                    const img = new Image();
                    img.src = event.target.result;
                    img.onload = () => {
                        context.clearRect(0, 0, canvas.width, canvas.height); // Clear the canvas
                        context.drawImage(img, 0, 0, canvas.width, canvas.height); // Draw the image on the canvas
                        saveState(); // Save the canvas state after adding the image
                    };
                };
                reader.readAsDataURL(file);
            }
        });

        const downloadButton = document.getElementById("download-btn");
        downloadButton.addEventListener("click", () => {
            const link = document.createElement("a");
            link.download = "canvas-drawing.png"; // Set the default file name
            link.href = canvas.toDataURL("image/png"); // Get the canvas content as a PNG
            link.click(); // Trigger the download
        });

        // Initialize the canvas by saving the first state
        saveState();
    </script>
</body>


</html>